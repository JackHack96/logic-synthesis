Utility Package
Rick Spickelmier
University of California at Berkeley
------------------------------------------------------

`Utility' is a package of commonly defined functions and macros.

The header is file:	~octtools/include/utility.h
The library is:		~octtools/lib/libutility.a
The lint library is:	~octtools/lib/llib-lutility.ln

This pacakge requires the following packages: mm, portability


Summary:
	ALLOC()
	REALLOC()
	FREE()
	NIL()
	MAX()
	MIN()
	ABS()
	NIL_FN()
	int util_pipefork()
	char *util_tilde_expand()
	char *util_file_search()
	char *util_path_search()
	char *util_csystem()
	long util_cpu_time()
	char *util_print_time()
	char *util_strsav()
	FILE *util_tmpfile()

type *
ALLOC(type, number)
typeof type;
int number;
	Allocates `number' objects of type `type'.  This macro should be used
	rather than calling malloc() directly because it casts the arguments
	appropriately, and ALLOC() will never return NIL(char), choosing
	instead to terminate the program.


void
FREE(obj)
	Free object `obj'.  This macro should be used rather than
	calling free() directly because it casts the argument
	appropriately.  It also guarantees that FREE(0) will work
	properly.  Note that FREE evaluates its' argument three
	times, for example:

		i = 10;
		while (i > 0) {
		    FREE(a[--i]);
		}

	is not the same as:

		i = 10;
		while (i > 0) {
		    --i;
		    FREE(a[i]);
		}


type *
REALLOC(type, obj, number)
	Re-allocate `obj' to hold `number' objects of type `type'.
	This macro should be used rather than calling realloc()
	directly because it casts the arguments appropriately, and
	REALLOC() will never return NIL(char), instead choosing to
	terminate the program.  It also guarantees that REALLOC(type, 0, n)
	is the same as ALLOC(type, n).


type *
NIL(type)
	Returns 0 properly casted into a pointer to an object of type
	'type'.  Strictly speaking, this macro is only required when
	a 0 pointer is passed as an argument to a function.  Still,
	some prefer the style of always casting their 0 pointers using
	this macro.


MAX(a, b)
	A macro that returns the maximum of the two numbers.
	Note that MAX evaluates the maximum argument twice
	and the minimum once.


MIN(a, b)
	A macro that returns the minimum of the two numbers.
	Note that MIN evaluates the minimum argument twice
	and the maximum once.


ABS(a)
	A macro that returns the absolute value of `a'.
	

NIL_FN(type)
	A macro that returns a NIL function pointer of type `type'.


int
util_pipefork(argv, toCommand, fromCommand)
char **argv;
FILE **toCommand;
FILE **fromCommand;
	Fork (using execvp(3)) the program argv[0] with argv[1] ...
	argv[n] as arguments.  (argv[n+1] is set to NIL(char) to
	indicate the end of the list).  Set up two-way pipes between
	the child process and the parent, returning file pointer
	'toCommand' which can be used to write information to the
	child, and the file pointer `fromCommand' which can be used to
	read information from the child.  As always with unix pipes,
	watch out for dead-locks.  Returns 1 for success, 0 if any
	failure occured forking the child.


char *
util_tilde_expand(filename)
char *filename;
	Returns a static buffer corresponding to `tilde-expansion' of the
	given filename (see csh(1), "filename substitution").  This
	means recognizing ~user and ~/ constructs, and inserting the
	appropriate user's home directory.  The returned string is
	static and should not be freed by the caller.  There is a
	ring of 8 buffers used in returning values.


char *
util_file_search(file, path, mode)
char *file;
char *path;
char *mode;
	'path' is string of the form "dir1:dir2: ...".  Each of the
	directories is searched (in order) for a file matching `file'
	in that directory.  `mode' checks that the file can be accessed
	with read permission ("r"), write permission ("w"), or execute
	permission ("x").  The expanded filename is returned, or
	NIL(char) is returned if no file could be found.  The returned
	string is static and should not be freed by the caller.
	Tilde expansion is performed on both `file' and any directory
	in `path'.


char *
util_path_search(program)
char *program;
	Simulate the execvp(3) semantics of searching the user's environment
	variable PATH for an executable `program'.  Returns the file name
	of the first executable matching `program' in getenv("PATH"), or
	returns NIL(char) if none was found.  This routines uses 
	util_file_search().  The returned string is static and should
	not be freed by the caller.

	
int
util_csystem(command)
char *command;
        Like `system', but uses `csh'.


long
util_cpu_time()
	Returns the processor time used since some constant reference
	in milliseconds.


char *
util_print_time(time)
long time;
	Converts a time into a (static) printable string.  Intended to
	allow different hosts to provide differing degrees of
	significant digits in the result (e.g., IBM 3090 is printed to
	the millisecond, and the IBM PC usually is printed to the
	second).  Returns a string of the form "10.5 sec".


char *
util_strsav(s)
char *s;
	Returns a copy of the string `s'.  

FILE *
util_tmpfile()
	Returns a file pointer to a temporary file opened for "w+".
	The file has already been unlinked.

