/*
 * Revision Control Information
 *
 * $Source: /users/pchong/CVS/sis/sis/octio/octio.doc,v $
 * $Author: pchong $
 * $Revision: 1.1.1.1 $
 * $Date: 2004/02/07 10:14:47 $
 *
 */
/* Exported interface --- present in octio.h */
int
external_read_oct(networkp, argc, argv)
network_t ** networkp;
int argc;
char** argv;
	This routine fills in *networkp with the network read in.
	This routine packages the interface routine read_oct() described
	below. The legal values for argc and argv are ---

	argc   argv[0]	argv[1]		argv[2]		internal routine
	----------------------------------------------------------------
	 2    read_oct	cell:view		  ||| read_oct(facet, 0)
	 3    read_oct	-m	      cell:view   ||| read_oct(facet, 1)


int
external_write_oct(networkp, argc, argv)
network_t ** networkp;
int argc;
char** argv;
	This routine writes out *networkp into the specified "cell:view"
	This routine packages the interface routine write_oct() described
	below.  The facet "cell:view" should be writeable by the user.
	The legal values for argc and argv are ---

	argc   argv[0]	argv[1]
	--------------------------
	 2    write_oct	cell:view


/* Internal interface --- not present in octio.h */
int
write_oct(network, facet)
network_t *network;
octObject *facet;
	Write a network into an OCT facet.  
	The routine returns 0 on error and 1 for success.  On errors an
	appropriate error message will be placed in the error buffer.

network_t *
read_oct(facet, mappedp)
octObject *facet;
int mappedp;
	Read an Oct facet that contains a logic network and
	build a network in SIS that represents it. In case mapped is 0,
	only instances with CELLTYPE = COMBINATIONAL will be processed.
	The logic function for a gate is obtained as follows, first the
	library is checked if present, then the instance is checked for
	a LOGIC-FUNCTION attached to it (for combinational cells) otherwise
	the master is checked for the relevant information.
	If a library has been read in and mappedp is 1, this information
	will be maintained on read in.  On error conditions such as illegal
	logic function an appropriate error message will be placed in the
	error buffer and NIL(network_t) will be returned. 

