Portability Package
Rick Rudell
University of California at Berkeley

Currently maintained by: Rick Spickelmier, UC Berkeley
------------------------------------------------------

`Port' is a package of functions and macros that simplify the task of
making a tool or package portable across a range of machines and operating
systems.

Includes: stdio.h, ctype.h, string(s).h, assert.h, math.h, and ansi support.

The header is file:	~octtools/include/port.h
The library is:		~octtools/lib/libport.a
The lint library is:	~octtools/lib/llib-lport.ln


Defines:

    CONST: is either 'const' for ANSI compilers, or nothing
    SIZET: result of 'sizeof' (normally 'int') - must be changed
    by hand.
    SIGNAL_FN: return value for signal handlers


Supplies the SYSTEM V standard memory and string functions.  See
memory (3) and strings(3) for more information.



Note: if your compiler supports pointers to 'void', the 'memory' functions
will be defined to return pointers to 'void' and take pointers to 'void'
as arguments (rather than pointers to 'char').
	
char *
memcpy(s1, s2, n)
char *s1, *s2;
int n;

    	Copy `n' characters from the memory area pointed to by `s2'
	to the memory area pointed to by `s1'.  Returns `s1'.
	Called `bcopy' on 4.3BSD UNIX.


char *
memset(s, c, n)
char *s;
int c, n;

    	Set the first `n' characters in the memory area pointed to by `s'
	to the value of the character `c'.  Most commonly used to zero
	an area of memory (called a `bzero' on 4.3BSD UNIX).  Returns a `s'.
	

int
memcmp(s1, s2, n)
char *s1, *s2;
int n;

	Compare the first `n' characters of `s1' and `s2'.  Returns 0
	0 if the first `n' characters of `s1' and `s2' are the same,
	less than 0 if `s1' is lexicographically less than `s2', or
	greater than 0 is `s1' is lexicographically greater than `s2'.

	
char *
strchr(s, c)
char *s;
int c;

    	Returns a pointer to the first occurance of the character `c' in
	the string `s', or a NULL pointer if `c' doesnot occur in the string.
	Called `index' on 4.3BSD UNIX.

		
char *
strrchr(s, c)
char *s;
int c;

    	Returns a pointer to the last occurance of the character `c' in
	the string `s', or a NULL pointer if `c' doesnot occur in the string.
	Called `rindex' on 4.3BSD UNIX.

